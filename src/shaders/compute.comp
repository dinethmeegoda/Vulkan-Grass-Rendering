#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// Add bindings to:
// 1. Store the input blades

layout(set = 2, binding = 0) buffer GrassBlades {
	Blade blades[];
};

// 2. Write out the culled blades

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// 3. Write the total number of blades remaining

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint firstInstance;
} numBlades;

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec2 random2(vec2 p)
{
    return fract(sin(vec2(dot(p, vec2(127.1f, 311.7f)),
                 dot(p, vec2(269.5f,183.3f))))
                 * 43758.5453f);
}

float surflet2D(vec2 p, vec2 gridPoint)
{
    // Compute falloff function by converting linear distance to a polynomial
    float distX = abs(p.x - gridPoint.x);
    float distY = abs(p.y - gridPoint.y);
    float tX = 1 - 6 * pow(distX, 5.f) + 15 * pow(distX, 4.f) - 10 * pow(distX, 3.f);
    float tY = 1 - 6 * pow(distY, 5.f) + 15 * pow(distY, 4.f) - 10 * pow(distY, 3.f);
    // Get the random vector for the grid point
    vec2 rand = random2(gridPoint);
    vec2 gradient = normalize(2.f * rand - vec2(1.f));
    // Get the vector from the grid point to P
    vec2 diff = p - gridPoint;
    // Get the value of our height field by dotting grid->P with our gradient
    float height = dot(diff, gradient);
    // Scale our height field (i.e. reduce it) by our polynomial falloff function
    return height * tX * tY;
}

float perlinNoise2D(vec2 p)
{
    float surfletSum = 0.f;
    // Iterate over the four integer corners surrounding uv
    for(int dx = 0; dx <= 1; ++dx) {
        for(int dy = 0; dy <= 1; ++dy) {
            surfletSum += surflet2D(p, floor(p) + vec2(dx, dy));
        }
    }
    return surfletSum;
}

bool inFrustum(vec3 pos, float tolerance) {
	vec4 clip = camera.proj * camera.view * vec4(pos, 1.0);
	//clip /= clip.w;
	float clipTolerance = tolerance + clip.w;
    return inBounds(clip.x, clipTolerance) && inBounds(clip.y, clipTolerance);// && inBounds(clip.z, clipTolerance);
}


void main() {

    const uint currBladeIdx = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (currBladeIdx == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

    Blade currBlade = blades[currBladeIdx];
    vec3 v0 = currBlade.v0.xyz;
    vec3 v1 = currBlade.v1.xyz;
    vec3 v2 = currBlade.v2.xyz;
    vec3 up = currBlade.up.xyz;

    float orientation = currBlade.v0.w;
    float height = currBlade.v1.w;
    float width = currBlade.v2.w;
    float stiffness = currBlade.up.w;

    vec3 orientationVec = vec3(cos(orientation), 0.0, -sin(orientation));
    vec3 forward = normalize(cross(up, orientationVec));

    // Gravity
    vec4 D = vec4(0.0, -1, 0.0, 2.0);

    vec3 gE = normalize(D.xyz) * D.w;
    vec3 gF = 0.25f * length(gE) * forward;
    vec3 gravity = gE + gF;
    
    // Recovery
    vec3 iv2 = v0 + normalize(up) * height;
    vec3 recovery = stiffness * (iv2 - v2);

    // Wind
    float noise = perlinNoise2D(v0.xz * totalTime * 0.1) * 0.9;
    vec3 windDir = vec3(2.0, 0.0, 3.0) * noise;
    float fd = 1 - abs(dot(normalize(windDir), normalize(v2 - v0)));
    float fr = 0.0;
    if (height == 0.0) {
	    fr = 1.0f;
	} else {
        fr = dot(v2 - v0, up) / height;
    }
    vec3 windForce = windDir * fd * fr;

    // Apply forces
    v2 += (gravity + recovery + windForce) * deltaTime;

    // Correct the blade from formulas from paper
    float projection = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1.f - projection / height, 0.05 * max(projection / height, 1.0));
    v2 -= up * min(dot(up, v2 - v0), 0.0);

    float L0 = distance(v0, v2);
    float L1 = distance(v0, v1) + distance(v1, v2);
    float L = 0.5 * (L0 + L1);
    float r = height / L;
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    // Update the blade
    blades[currBladeIdx].v1.xyz = v1;
    blades[currBladeIdx].v2.xyz = v2;


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

#define ORIENTATION_CULLING 1
#define FRUSTUM_CULLING 1
#define DISTANCE_CULLING 1

#if ORIENTATION_CULLING
    // Orientation Culling
    vec3 viewDir = vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]);
    if (abs(dot(viewDir, normalize(forward))) < 0.3)
    {
        return;
    }
#endif

#if FRUSTUM_CULLING
	// Frustum Culling
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    float tolerance = -0.15;
    if( !inFrustum(v0, tolerance) && !inFrustum(v2, tolerance) && !inFrustum(m, tolerance)) {
        return;
    }
#endif

#if DISTANCE_CULLING
	// Distance Culling
    vec3 camPos = inverse(camera.view)[3].xyz;
    float distance_projection = length(v0 - camPos - up * (dot(v0 - camPos, up)));

    if (distance_projection > 25.0) {
		return;
	}
#endif

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[gl_GlobalInvocationID.x];

}
